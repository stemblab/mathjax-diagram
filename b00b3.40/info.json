{
  "id" : "b00b3.40",
  "moduleIdx" : 303,
  "baseId" : "b00b3.39",
  "name" : "Integrate MathJax into SVG Diagram",
  "url" : "?id=b00b3.40",
  "valid" : true,
  "editor" : "martin",
  "editorIp" : "58.28.155.63",
  "timestamp" : "2014-03-01 22:00:14",
  "isoTime" : "2014-03-01T22:00:14+13:00",
  "canAccessFolder" : true,
  "isSandbox" : false,
  "canCommit" : true,
  "share" : null,
  "isPublic" : true,
  "price" : null,
  "uses" : "b007c.5,b009t.2",
  "imports" : [
    {
      "id" : "b007c.5",
      "moduleIdx" : 221,
      "baseId" : "b007c.4",
      "name" : "Module Languages",
      "url" : "?id=b007c.5",
      "valid" : true,
      "editor" : "martin",
      "editorIp" : "58.28.155.63",
      "timestamp" : "2013-08-22 20:20:34",
      "isoTime" : "2013-08-22T20:20:34+12:00",
      "canAccessFolder" : true,
      "isSandbox" : false,
      "canCommit" : true,
      "share" : "gary",
      "isPublic" : true,
      "price" : null,
      "depth" : 1,
      "fromUses" : false,
      "importer" : "b00b3.40"
    },
    {
      "id" : "b009t.2",
      "moduleIdx" : 295,
      "baseId" : "b009t.1",
      "name" : "JavaScript Execution",
      "url" : "?id=b009t.2",
      "valid" : true,
      "editor" : "martin",
      "editorIp" : "58.28.155.63",
      "timestamp" : "2014-02-20 13:31:30",
      "isoTime" : "2014-02-20T13:31:30+13:00",
      "canAccessFolder" : true,
      "isSandbox" : false,
      "canCommit" : true,
      "share" : null,
      "isPublic" : true,
      "price" : null,
      "depth" : 1,
      "fromUses" : false,
      "importer" : "b00b3.40"
    },
    {
      "id" : "b000n.5",
      "moduleIdx" : 20,
      "baseId" : "b000n.4",
      "name" : "HTML\/JavaScript definition",
      "url" : "?id=b000n.5",
      "valid" : true,
      "editor" : "martin",
      "editorIp" : "58.28.155.63",
      "timestamp" : "2012-08-19 12:17:24",
      "isoTime" : "2012-08-19T12:17:24+12:00",
      "canAccessFolder" : true,
      "isSandbox" : false,
      "canCommit" : true,
      "share" : null,
      "isPublic" : true,
      "price" : null,
      "depth" : 2,
      "fromUses" : false,
      "importer" : "b007c.5"
    },
    {
      "id" : "b006m.2",
      "moduleIdx" : 199,
      "baseId" : "b006m.1",
      "name" : "CoffeeScript definition",
      "url" : "?id=b006m.2",
      "valid" : true,
      "editor" : "martin",
      "editorIp" : "58.28.155.63",
      "timestamp" : "2012-12-10 13:59:29",
      "isoTime" : "2012-12-10T13:59:29+13:00",
      "canAccessFolder" : true,
      "isSandbox" : false,
      "canCommit" : true,
      "share" : null,
      "isPublic" : true,
      "price" : null,
      "depth" : 2,
      "fromUses" : false,
      "importer" : "b007c.5"
    },
    {
      "id" : "b000d.15",
      "moduleIdx" : 12,
      "baseId" : "b000d.14",
      "name" : "Python definition",
      "url" : "?id=b000d.15",
      "valid" : true,
      "editor" : "martin",
      "editorIp" : "58.28.155.63",
      "timestamp" : "2013-05-20 15:20:43",
      "isoTime" : "2013-05-20T15:20:43+12:00",
      "canAccessFolder" : true,
      "isSandbox" : false,
      "canCommit" : true,
      "share" : "gary",
      "isPublic" : true,
      "price" : null,
      "depth" : 2,
      "fromUses" : false,
      "importer" : "b007c.5"
    },
    {
      "id" : "b000g.10",
      "moduleIdx" : 14,
      "baseId" : "b000g.9",
      "name" : "Octave definition",
      "url" : "?id=b000g.10",
      "valid" : true,
      "editor" : "martin",
      "editorIp" : "58.28.155.63",
      "timestamp" : "2013-08-22 20:03:42",
      "isoTime" : "2013-08-22T20:03:42+12:00",
      "canAccessFolder" : true,
      "isSandbox" : false,
      "canCommit" : true,
      "share" : "gary",
      "isPublic" : true,
      "price" : null,
      "depth" : 2,
      "fromUses" : false,
      "importer" : "b007c.5"
    }
  ],
  "defs" : {
    "html" : {
      "src" : "b000n.5",
      "fileExt" : "html",
      "endToken" : "<!--puzlet_end-->",
      "endTokenExec" : "<!--puzlet_end-->",
      "passThru" : "true"
    },
    "javascript" : {
      "src" : "b000n.5",
      "fileExt" : "js",
      "endToken" : "\/\/!end",
      "endTokenExec" : "\/\/!end",
      "includeInHtmlHead" : "true"
    },
    "css" : {
      "src" : "b000n.5",
      "fileExt" : "css",
      "endToken" : "\/*!end*\/",
      "endTokenExec" : "\/*!end*\/",
      "includeInHtmlHead" : "true"
    },
    "coffee" : {
      "src" : "b006m.2",
      "fileExt" : "coffee",
      "endToken" : "#!end",
      "endTokenExec" : "#!end",
      "includeInHtmlHead" : "true"
    },
    "python" : {
      "src" : "b000d.15",
      "fileExt" : "py",
      "preamble" : "#!puzlet",
      "preambleExec" : "import puzlet",
      "postambleExec" : "puzlet.endScript()",
      "endToken" : "#!end",
      "endTokenExec" : "puzlet.end",
      "preProcessFileCommand" : "\nexport PYTHONPATH=..\/..\/..\/puzlet\/b000d.15; python ..\/..\/..\/puzlet\/b000d.15\/preprocessscript.py\n",
      "execFileCommand" : "\nexport PYTHONPATH=..\/..\/..\/puzlet\/b000d.15; python -W ignore::DeprecationWarning\n"
    },
    "octave" : {
      "src" : "b000g.10",
      "fileExt" : "m",
      "endToken" : "%!end",
      "endTokenExec" : "_end",
      "preProcessFileCommand" : "\nexport PYTHONPATH=..\/..\/..\/puzlet\/b000g.10; python ..\/..\/..\/puzlet\/b000g.10\/preprocessoctave.py\n",
      "execFileCommand" : "\noctave -H --no-line-editing -q\n"
    }
  },
  "exports" : [
    {
      "lang" : "javascript",
      "moduleId" : "b009t.2",
      "file" : "main"
    }
  ],
  "htmlResources" : "<script type='text\/javascript' src='\/puzlet\/php\/source.php?pageId=b009t.2&file=main.js'><\/script>\n<script src='\/puzlet\/php\/source.php?pageId=b00b3.40&file=resources.js' type='text\/javascript'><\/script>\n<script src='\/puzlet\/php\/source.php?pageId=b00b3.40&file=mathjax.js' type='text\/javascript'><\/script>\n<script src='\/puzlet\/php\/source.php?pageId=b00b3.40&file=formatxml.js' type='text\/javascript'><\/script>\n",
  "usedModulePath" : [
    "..\/..\/..\/puzlet\/b007c.5",
    "..\/..\/..\/puzlet\/b009t.2",
    "..\/..\/..\/puzlet\/b000n.5",
    "..\/..\/..\/puzlet\/b006m.2",
    "..\/..\/..\/puzlet\/b000d.15",
    "..\/..\/..\/puzlet\/b000g.10"
  ],
  "codeNodes" : [
    {
      "id" : "1",
      "lang" : "html",
      "filename" : "tutorial.html",
      "fileNoExt" : "tutorial",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "<!--puzlet_end-->",
      "idxInFile" : 0,
      "idxInPage" : 0,
      "codeBlockLength" : 7,
      "codeBlockStart" : 0,
      "show" : "0",
      "out" : "1",
      "math" : "svg",
      "code" : "<div style=\"margin-top: -10px; margin-bottom: 20px; \n    width: 720px; text-align: center; color: #888\">\n    Martin Clark<br>1 March 2014\n<\/div>"
    },
    {
      "id" : "39",
      "lang" : "coffee",
      "filename" : "resources.coffee",
      "fileNoExt" : "resources",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "#!end",
      "idxInFile" : 0,
      "idxInPage" : 1,
      "codeBlockLength" : 7,
      "codeBlockStart" : 0,
      "show" : "0",
      "out" : "1",
      "code" : "$pz.resources = -> [\n\t{file: \"mathjax.js\", fromPage: true}\n    {url: \"\/jslib\/vkbeautify.0.99.00.beta.js\"}\n]"
    },
    {
      "id" : "38",
      "lang" : "html",
      "filename" : "tutorial.html",
      "fileNoExt" : "tutorial",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "<!--puzlet_end-->",
      "idxInFile" : 1,
      "idxInPage" : 2,
      "codeBlockLength" : 14,
      "codeBlockStart" : 0,
      "show" : "0",
      "out" : "1",
      "code" : "One way to integrate MathJax-generated SVG into an SVG diagram is to \n[http:\/\/stackoverflow.com\/questions\/15962325\/mathjax-inside-svg, \nuse the %foreignObject% tag].\nUnfortunately, %foreignObject% isn't compatible with all browsers\n(e.g., IE) and isn't supported in standalone SVG files.\n\nThis module shows how to integrate MathJax SVG directly \ninto an SVG diagram, without requiring %foreignObject%.\n\nThe module [\/m\/b00b1, CoffeeScript Block Diagram] uses\nthis technique."
    },
    {
      "id" : "30",
      "lang" : "html",
      "filename" : "tutorial.html",
      "fileNoExt" : "tutorial",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "<!--puzlet_end-->",
      "idxInFile" : 2,
      "idxInPage" : 3,
      "codeBlockLength" : 7,
      "codeBlockStart" : 0,
      "show" : "0",
      "out" : "1",
      "code" : "==SVG Diagram==\nFirst, we create an SVG Diagram with a border and a rectangle element \n(yellow box).  We'll show how to position a MathJax element \nwithin the box."
    },
    {
      "id" : "20",
      "lang" : "html",
      "filename" : "mathjax.html",
      "fileNoExt" : "mathjax",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "<!--puzlet_end-->",
      "idxInFile" : 0,
      "idxInPage" : 4,
      "codeBlockLength" : 11,
      "codeBlockStart" : 0,
      "show" : "1",
      "out" : "1",
      "code" : "<svg id=\"diagram\" xmlns='http:\/\/www.w3.org\/2000\/svg' \n    xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\"\n    version='1.1' width='720' height='100'>\n    <rect x=\"1\" y=\"1\" width=\"718\" height=\"98\" \n        style=\"fill: white; stroke: blue; stroke-width: 0.5\"><\/rect>\n    <rect id=\"yellowBox\" x=\"100\" y=\"30\" width=\"150\" height=\"50\" \n        style=\"fill: #ffa; stroke: black;\"><\/rect>\n<\/svg>"
    },
    {
      "id" : "23",
      "lang" : "html",
      "filename" : "tutorial.html",
      "fileNoExt" : "tutorial",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "<!--puzlet_end-->",
      "idxInFile" : 3,
      "idxInPage" : 5,
      "codeBlockLength" : 8,
      "codeBlockStart" : 0,
      "show" : "0",
      "out" : "1",
      "code" : "==MathJax Element==\nHere's a \\<div\\> with a MathJax element.\nWe'll use just a single character to make the SVG code easy to follow.\nLater, we'll show that the method also works for complex \nMathJax expressions."
    },
    {
      "id" : "9",
      "lang" : "html",
      "filename" : "mathjax.html",
      "fileNoExt" : "mathjax",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "<!--puzlet_end-->",
      "idxInFile" : 1,
      "idxInPage" : 6,
      "codeBlockLength" : 6,
      "codeBlockStart" : 0,
      "math" : "svg",
      "show" : "1",
      "out" : "1",
      "code" : "<div id=\"mathjaxSource\" style=\"padding: 20px; background: #cfc\">\n$\\Omega$\n<\/div>"
    },
    {
      "id" : "8",
      "lang" : "html",
      "filename" : "tutorial.html",
      "fileNoExt" : "tutorial",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "<!--puzlet_end-->",
      "idxInFile" : 4,
      "idxInPage" : 7,
      "codeBlockLength" : 11,
      "codeBlockStart" : 0,
      "show" : "0",
      "out" : "1",
      "code" : "==MathJax SVG==\nWe use CoffeeScript (or JavaScript) and jQuery to get the \ngenerated HTML\/SVG for this MathJax.\n\n(Note: %run% is a pre-defined function to execute code \nwithin this Puzlet web page.\n%dispXml% is a pre-defined function to display XML\nin a \\<div\\> element below the code.)"
    },
    {
      "id" : "13",
      "lang" : "coffee",
      "filename" : "mathjax.coffee",
      "fileNoExt" : "mathjax",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "#!end",
      "idxInFile" : 0,
      "idxInPage" : 8,
      "codeBlockLength" : 27,
      "codeBlockStart" : 0,
      "show" : "0",
      "out" : "1",
      "code" : "window.console ?= {log: ->}\n\nrun = (f) -> \n    # mathjaxPreConfig is a Puzlet event.\n    $(document).on \"mathjaxPreConfig\", =>\n        MathJax.Hub.Register.StartupHook \"End\", (-> f())\n        \nxmlString = ($xmlObj) ->\n    serializer = new XMLSerializer()\n    xml = serializer.serializeToString $xmlObj[0]\n    prettyXml = vkbeautify.xml xml\n        \ndispXml = (divId, obj) ->\n    return unless obj\n    div = $ \"##{divId}\"\n    pre = $ \"<pre>\"\n        css:\n            padding: \"10px\"\n            fontSize: \"10pt\"\n            lineHeight: \"110%\"\n            background: \"#ffe\"\n    div.append pre\n    prettyXml = xmlString obj\n    pre.text prettyXml"
    },
    {
      "id" : "25",
      "lang" : "coffee",
      "filename" : "mathjax.coffee",
      "fileNoExt" : "mathjax",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "#!end",
      "idxInFile" : 1,
      "idxInPage" : 9,
      "codeBlockLength" : 6,
      "codeBlockStart" : 0,
      "show" : "1",
      "out" : "1",
      "code" : "run ->\n    source = $(\"#mathjaxSource\").find \".MathJax_SVG\"\n    dispXml \"mathjax\", source"
    },
    {
      "id" : "11",
      "lang" : "html",
      "filename" : "out.html",
      "fileNoExt" : "out",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "<!--puzlet_end-->",
      "idxInFile" : 0,
      "idxInPage" : 10,
      "codeBlockLength" : 4,
      "codeBlockStart" : 0,
      "show" : "0",
      "out" : "1",
      "code" : "<div id=\"mathjax\"><\/div>"
    },
    {
      "id" : "15",
      "lang" : "html",
      "filename" : "tutorial.html",
      "fileNoExt" : "tutorial",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "<!--puzlet_end-->",
      "idxInFile" : 5,
      "idxInPage" : 11,
      "codeBlockLength" : 6,
      "codeBlockStart" : 0,
      "show" : "0",
      "out" : "1",
      "code" : "==Embedding MathJax in Diagram==\nThe class below clones the MathJax SVG and scales\/translates it so that\nit can be included within our SVG diagram. We'll use this class soon."
    },
    {
      "id" : "14",
      "lang" : "coffee",
      "filename" : "mathjax.coffee",
      "fileNoExt" : "mathjax",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "#!end",
      "idxInFile" : 2,
      "idxInPage" : 12,
      "codeBlockLength" : 25,
      "codeBlockStart" : 0,
      "show" : "1",
      "out" : "1",
      "code" : "class MathJaxObject\n\n    constructor: (@divId, @scale=0.02) ->\n        @source = $(\"##{@divId}\").find \".MathJax_SVG\"\n        @svg = @source.find \"svg\"\n        g = @svg.find \"g\"\n        @group = $(g[0]).clone()\n        @translate 0, 0\n            \n    viewBox: -> @svg[0].viewBox\n    \n    width: -> @scale * @viewBox().baseVal.width\n    \n    height: -> @scale * @viewBox().baseVal.height\n     \n    translate: (@dx, @dy) ->\n        dy = @dy + (-@scale * @viewBox().baseVal.y)\n        @group[0].setAttribute \"transform\", \n            \"translate(#{@dx} #{dy}) scale(#{@scale}) matrix(1 0 0 -1 0 0)\"\n                \n    appendTo: (diagram) ->\n        diagram.append @group"
    },
    {
      "id" : "27",
      "lang" : "html",
      "filename" : "tutorial.html",
      "fileNoExt" : "tutorial",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "<!--puzlet_end-->",
      "idxInFile" : 6,
      "idxInPage" : 13,
      "codeBlockLength" : 8,
      "codeBlockStart" : 0,
      "show" : "0",
      "out" : "1",
      "code" : "The function %show% clones the original SVG diagram,\ncreates a %MathJaxObject% (the class above),\nand appends the object to the cloned diagram.\nIt also displays the diagram's SVG code after the MathJax is embedded.\nThe displayed MathJax appears at the top-left corner of the SVG diagram."
    },
    {
      "id" : "28",
      "lang" : "coffee",
      "filename" : "mathjax.coffee",
      "fileNoExt" : "mathjax",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "#!end",
      "idxInFile" : 3,
      "idxInPage" : 14,
      "codeBlockLength" : 16,
      "codeBlockStart" : 0,
      "show" : "1",
      "out" : "1",
      "code" : "show = (divId, mathjaxId, f=null) ->\n    run ->\n        div = $ \"##{divId}\"  # Div to display diagram\n        diagram = $(\"#diagram\").clone()  # Clone original SVG diagram\n        diagram.attr \"id\", \"diagram_\"+mathjaxId  # Cloned diagram id\n        div.append diagram\n    \n        obj = new MathJaxObject mathjaxId  # MathJax object\n        f?(obj)  # Optional callback for object (e.g., translation)\n        obj.appendTo diagram  # Append MathJax object to diagram\n        dispXml divId, diagram\n\nshow \"mathjaxAtOrigin\", \"mathjaxSource\""
    },
    {
      "id" : "24",
      "lang" : "html",
      "filename" : "out.html",
      "fileNoExt" : "out",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "<!--puzlet_end-->",
      "idxInFile" : 1,
      "idxInPage" : 15,
      "codeBlockLength" : 4,
      "codeBlockStart" : 0,
      "show" : "0",
      "out" : "1",
      "code" : "<div id=\"mathjaxAtOrigin\"><\/div>"
    },
    {
      "id" : "16",
      "lang" : "html",
      "filename" : "tutorial.html",
      "fileNoExt" : "tutorial",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "<!--puzlet_end-->",
      "idxInFile" : 7,
      "idxInPage" : 16,
      "codeBlockLength" : 6,
      "codeBlockStart" : 0,
      "show" : "0",
      "out" : "1",
      "code" : "==Positioning MathJax Object==\nNow we'll position the MathJax object at the top-left corner \nof the yellow box in the SVG diagram."
    },
    {
      "id" : "17",
      "lang" : "coffee",
      "filename" : "mathjax.coffee",
      "fileNoExt" : "mathjax",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "#!end",
      "idxInFile" : 4,
      "idxInPage" : 17,
      "codeBlockLength" : 17,
      "codeBlockStart" : 0,
      "show" : "1",
      "out" : "1",
      "code" : "rect = (id) ->\n    # Returns an object that contains the coordinates and dimensions\n    # of a ractangle element.\n    r = $ \"##{id}\"\n    val = (p) -> r[0][p].baseVal.value \n    coords =\n        x: val \"x\"\n        y: val \"y\"\n        width: val \"width\"\n        height: val \"height\"\n\nshow \"mathjaxInBox\", \"mathjaxSource\", (obj) ->\n    r = rect \"yellowBox\"\n    obj.translate r.x, r.y"
    },
    {
      "id" : "18",
      "lang" : "html",
      "filename" : "out.html",
      "fileNoExt" : "out",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "<!--puzlet_end-->",
      "idxInFile" : 2,
      "idxInPage" : 18,
      "codeBlockLength" : 4,
      "codeBlockStart" : 0,
      "show" : "0",
      "out" : "1",
      "code" : "<div id=\"mathjaxInBox\"><\/div>"
    },
    {
      "id" : "29",
      "lang" : "html",
      "filename" : "tutorial.html",
      "fileNoExt" : "tutorial",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "<!--puzlet_end-->",
      "idxInFile" : 8,
      "idxInPage" : 19,
      "codeBlockLength" : 5,
      "codeBlockStart" : 0,
      "show" : "0",
      "out" : "1",
      "code" : "We can center the MathJax object within the yellow box by using\n%width% and %height% for the MathJax object and the yellow box."
    },
    {
      "id" : "21",
      "lang" : "coffee",
      "filename" : "mathjax.coffee",
      "fileNoExt" : "mathjax",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "#!end",
      "idxInFile" : 5,
      "idxInPage" : 20,
      "codeBlockLength" : 8,
      "codeBlockStart" : 0,
      "show" : "1",
      "out" : "1",
      "code" : "show \"mathjaxCenteredInBox\", \"mathjaxSource\", (obj) ->\n    r = rect \"yellowBox\"\n    x = r.x + (r.width - obj.width())\/2\n    y = r.y + (r.height - obj.height())\/2\n    obj.translate x, y"
    },
    {
      "id" : "22",
      "lang" : "html",
      "filename" : "out.html",
      "fileNoExt" : "out",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "<!--puzlet_end-->",
      "idxInFile" : 3,
      "idxInPage" : 21,
      "codeBlockLength" : 4,
      "codeBlockStart" : 0,
      "show" : "0",
      "out" : "1",
      "code" : "<div id=\"mathjaxCenteredInBox\"><\/div>"
    },
    {
      "id" : "31",
      "lang" : "html",
      "filename" : "tutorial.html",
      "fileNoExt" : "tutorial",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "<!--puzlet_end-->",
      "idxInFile" : 9,
      "idxInPage" : 22,
      "codeBlockLength" : 7,
      "codeBlockStart" : 0,
      "show" : "0",
      "out" : "1",
      "code" : "==Advanced Example==\n\nHere we define two MathJax objects, and embed them both into the diagram\nat different positions."
    },
    {
      "id" : "32",
      "lang" : "html",
      "filename" : "mathjax.html",
      "fileNoExt" : "mathjax",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "<!--puzlet_end-->",
      "idxInFile" : 2,
      "idxInPage" : 23,
      "codeBlockLength" : 14,
      "codeBlockStart" : 0,
      "show" : "1",
      "out" : "1",
      "code" : "<div style=\"padding: 20px; background: #cfc\">\n\n<div id=\"mathjaxIntegral\">\n$\\int_{-\\infty}^{\\infty} \\frac{\\gamma(t+\\delta)}{1+2\\gamma(t)} dt$\n<\/div>\n\n<div id=\"mathjaxGamma\">\n$\\Gamma(t) = \\sum_{n=1}^N \\Psi_n(t)$\n<\/div>\n\n<\/div>"
    },
    {
      "id" : "33",
      "lang" : "coffee",
      "filename" : "mathjax.coffee",
      "fileNoExt" : "mathjax",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "#!end",
      "idxInFile" : 6,
      "idxInPage" : 24,
      "codeBlockLength" : 26,
      "codeBlockStart" : 0,
      "show" : "1",
      "out" : "1",
      "code" : "run ->\n    \n    # Clone diagram.\n    divId = \"mathjaxAdvanced\"\n    div = $ \"##{divId}\"\n    diagram = $(\"#diagram\").clone()\n    diagram.attr \"id\", \"advancedDiagram\"\n    div.append diagram\n    r = rect \"yellowBox\"  # Yellow box\n\n    # Center integral in box.\n    integral = new MathJaxObject \"mathjaxIntegral\"\n    xI = r.x + (r.width - integral.width())\/2\n    yI = r.y + (r.height - integral.height())\/2\n    integral.translate xI, yI\n    integral.appendTo diagram   # Append MathJax object to diagram\n\n    # Position gamma equation vertically-centered to right of box.\n    gamma = new MathJaxObject \"mathjaxGamma\"\n    xG = r.x + r.width + 20\n    yG = r.y + (r.height - gamma.height())\/2\n    gamma.translate xG, yG\n    gamma.appendTo diagram"
    },
    {
      "id" : "34",
      "lang" : "html",
      "filename" : "out.html",
      "fileNoExt" : "out",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "<!--puzlet_end-->",
      "idxInFile" : 4,
      "idxInPage" : 25,
      "codeBlockLength" : 4,
      "codeBlockStart" : 0,
      "show" : "0",
      "out" : "1",
      "code" : "<div id=\"mathjaxAdvanced\"><\/div>"
    },
    {
      "id" : "35",
      "lang" : "html",
      "filename" : "tutorial.html",
      "fileNoExt" : "tutorial",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "<!--puzlet_end-->",
      "idxInFile" : 10,
      "idxInPage" : 26,
      "codeBlockLength" : 8,
      "codeBlockStart" : 0,
      "show" : "0",
      "out" : "1",
      "code" : "==Standalone SVG file==\nTo create a standalone SVG file, we need to embed MathJax glyphs\ninto the diagram's SVG.  The code below shows how to do this,\nand displays the SVG in a textarea that can be copied into \na standalone file."
    },
    {
      "id" : "37",
      "lang" : "coffee",
      "filename" : "mathjax.coffee",
      "fileNoExt" : "mathjax",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "#!end",
      "idxInFile" : 7,
      "idxInPage" : 27,
      "codeBlockLength" : 23,
      "codeBlockStart" : 0,
      "show" : "1",
      "out" : "1",
      "code" : "run ->\n    \n    # Diagram from example above\n    diagram = $ \"#advancedDiagram\"\n    \n    # Include MathJax glyphs at start of diagram's SVG.\n    glyphs = $ \"#MathJax_SVG_glyphs\"\n    diagram.prepend glyphs\n    \n    # Display diagram's SVG in highlighted textarea.\n    # xmlString is pre-defined function to convert XML object to string.\n    xml = xmlString diagram\n    textArea = $ \"<textarea>\",\n        text: xml\n        rows: 40, readonly: true\n        css: \n            width: \"720px\"\n            overflow: \"auto\"\n            whiteSpace: \"pre\"\n    $(\"#standaloneSVG\").append textArea"
    },
    {
      "id" : "36",
      "lang" : "html",
      "filename" : "out.html",
      "fileNoExt" : "out",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "<!--puzlet_end-->",
      "idxInFile" : 5,
      "idxInPage" : 28,
      "codeBlockLength" : 4,
      "codeBlockStart" : 0,
      "show" : "0",
      "out" : "1",
      "code" : "<div id=\"standaloneSVG\"><\/div>"
    },
    {
      "id" : "12",
      "lang" : "coffee",
      "filename" : "mathjax.coffee",
      "fileNoExt" : "mathjax",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "#!end",
      "idxInFile" : 8,
      "idxInPage" : 29,
      "codeBlockLength" : 18,
      "codeBlockStart" : 0,
      "show" : "0",
      "out" : "1",
      "code" : "class SVG\n\n    # ZZZ Later, get from SVG module\n    \n    @NS: \"http:\/\/www.w3.org\/2000\/svg\"\n    \n    @element: (type) -> document.createElementNS @NS, type\n    \n    @attr: (el, p, v) -> el.setAttributeNS null, p, v\n    \n    @get: (el, p) -> el.getAttributeNS null, p\n    \n    @set: (el, props) ->\n        for p, v of props\n            @attr el, p, v"
    },
    {
      "id" : "5",
      "lang" : "javascript",
      "filename" : "formatxml.js",
      "fileNoExt" : "formatxml",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "\/\/!end",
      "idxInFile" : 0,
      "idxInPage" : 30,
      "codeBlockLength" : 35,
      "codeBlockStart" : 0,
      "show" : "0",
      "out" : "1",
      "code" : "\/\/ Use vkbeautify instead of this now.\n\/\/ http:\/\/stackoverflow.com\/questions\/376373\/pretty-printing-xml-with-javascript\nfunction formatXml(xml) {\n    var formatted = '';\n    var reg = \/(>)(<)(\\\/*)\/g;\n    xml = xml.replace(reg, '$1\\r\\n$2$3');\n    var pad = 0;\n    jQuery.each(xml.split('\\r\\n'), function(index, node) {\n        var indent = 0;\n        if (node.match( \/.+<\\\/\\w[^>]*>$\/ )) {\n            indent = 0;\n        } else if (node.match( \/^<\\\/\\w\/ )) {\n            if (pad != 0) {\n                pad -= 1;\n            }\n        } else if (node.match( \/^<\\w[^>]*[^\\\/]>.*$\/ )) {\n            indent = 1;\n        } else {\n            indent = 0;\n        }\n\n        var padding = '';\n        for (var i = 0; i < pad; i++) {\n            padding += '  ';\n        }\n\n        formatted += padding + node + '\\r\\n';\n        pad += indent;\n    });\n\n    return formatted;\n}"
    }
  ]
}