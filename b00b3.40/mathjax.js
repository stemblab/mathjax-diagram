// Generated by CoffeeScript 1.4.0
(function() {
  var MathJaxObject, SVG, dispXml, rect, run, show, xmlString, _ref;

  if ((_ref = window.console) == null) {
    window.console = {
      log: function() {}
    };
  }

  run = function(f) {
    var _this = this;
    return $(document).on("mathjaxPreConfig", function() {
      return MathJax.Hub.Register.StartupHook("End", (function() {
        return f();
      }));
    });
  };

  xmlString = function($xmlObj) {
    var prettyXml, serializer, xml;
    serializer = new XMLSerializer();
    xml = serializer.serializeToString($xmlObj[0]);
    return prettyXml = vkbeautify.xml(xml);
  };

  dispXml = function(divId, obj) {
    var div, pre, prettyXml;
    if (!obj) {
      return;
    }
    div = $("#" + divId);
    pre = $("<pre>", {
      css: {
        padding: "10px",
        fontSize: "10pt",
        lineHeight: "110%",
        background: "#ffe"
      }
    });
    div.append(pre);
    prettyXml = xmlString(obj);
    return pre.text(prettyXml);
  };

  run(function() {
    var source;
    source = $("#mathjaxSource").find(".MathJax_SVG");
    return dispXml("mathjax", source);
  });

  MathJaxObject = (function() {

    function MathJaxObject(divId, scale) {
      var g;
      this.divId = divId;
      this.scale = scale != null ? scale : 0.02;
      this.source = $("#" + this.divId).find(".MathJax_SVG");
      this.svg = this.source.find("svg");
      g = this.svg.find("g");
      this.group = $(g[0]).clone();
      this.translate(0, 0);
    }

    MathJaxObject.prototype.viewBox = function() {
      return this.svg[0].viewBox;
    };

    MathJaxObject.prototype.width = function() {
      return this.scale * this.viewBox().baseVal.width;
    };

    MathJaxObject.prototype.height = function() {
      return this.scale * this.viewBox().baseVal.height;
    };

    MathJaxObject.prototype.translate = function(dx, dy) {
      this.dx = dx;
      this.dy = dy;
      dy = this.dy + (-this.scale * this.viewBox().baseVal.y);
      return this.group[0].setAttribute("transform", "translate(" + this.dx + " " + dy + ") scale(" + this.scale + ") matrix(1 0 0 -1 0 0)");
    };

    MathJaxObject.prototype.appendTo = function(diagram) {
      return diagram.append(this.group);
    };

    return MathJaxObject;

  })();

  show = function(divId, mathjaxId, f) {
    if (f == null) {
      f = null;
    }
    return run(function() {
      var diagram, div, obj;
      div = $("#" + divId);
      diagram = $("#diagram").clone();
      diagram.attr("id", "diagram_" + mathjaxId);
      div.append(diagram);
      obj = new MathJaxObject(mathjaxId);
      if (typeof f === "function") {
        f(obj);
      }
      obj.appendTo(diagram);
      return dispXml(divId, diagram);
    });
  };

  show("mathjaxAtOrigin", "mathjaxSource");

  rect = function(id) {
    var coords, r, val;
    r = $("#" + id);
    val = function(p) {
      return r[0][p].baseVal.value;
    };
    return coords = {
      x: val("x"),
      y: val("y"),
      width: val("width"),
      height: val("height")
    };
  };

  show("mathjaxInBox", "mathjaxSource", function(obj) {
    var r;
    r = rect("yellowBox");
    return obj.translate(r.x, r.y);
  });

  show("mathjaxCenteredInBox", "mathjaxSource", function(obj) {
    var r, x, y;
    r = rect("yellowBox");
    x = r.x + (r.width - obj.width()) / 2;
    y = r.y + (r.height - obj.height()) / 2;
    return obj.translate(x, y);
  });

  run(function() {
    var diagram, div, divId, gamma, integral, r, xG, xI, yG, yI;
    divId = "mathjaxAdvanced";
    div = $("#" + divId);
    diagram = $("#diagram").clone();
    diagram.attr("id", "advancedDiagram");
    div.append(diagram);
    r = rect("yellowBox");
    integral = new MathJaxObject("mathjaxIntegral");
    xI = r.x + (r.width - integral.width()) / 2;
    yI = r.y + (r.height - integral.height()) / 2;
    integral.translate(xI, yI);
    integral.appendTo(diagram);
    gamma = new MathJaxObject("mathjaxGamma");
    xG = r.x + r.width + 20;
    yG = r.y + (r.height - gamma.height()) / 2;
    gamma.translate(xG, yG);
    return gamma.appendTo(diagram);
  });

  run(function() {
    var diagram, glyphs, textArea, xml;
    diagram = $("#advancedDiagram");
    glyphs = $("#MathJax_SVG_glyphs");
    diagram.prepend(glyphs);
    xml = xmlString(diagram);
    textArea = $("<textarea>", {
      text: xml,
      rows: 40,
      readonly: true,
      css: {
        width: "720px",
        overflow: "auto",
        whiteSpace: "pre"
      }
    });
    return $("#standaloneSVG").append(textArea);
  });

  SVG = (function() {

    function SVG() {}

    SVG.NS = "http://www.w3.org/2000/svg";

    SVG.element = function(type) {
      return document.createElementNS(this.NS, type);
    };

    SVG.attr = function(el, p, v) {
      return el.setAttributeNS(null, p, v);
    };

    SVG.get = function(el, p) {
      return el.getAttributeNS(null, p);
    };

    SVG.set = function(el, props) {
      var p, v, _results;
      _results = [];
      for (p in props) {
        v = props[p];
        _results.push(this.attr(el, p, v));
      }
      return _results;
    };

    return SVG;

  })();

}).call(this);
